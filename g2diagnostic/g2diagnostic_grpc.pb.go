// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: g2diagnostic.proto

package g2diagnostic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// G2DiagnosticClient is the client API for G2Diagnostic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type G2DiagnosticClient interface {
	CheckDBPerf(ctx context.Context, in *CheckDBPerfRequest, opts ...grpc.CallOption) (*CheckDBPerfResponse, error)
	ClearLastException(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error)
}

type g2DiagnosticClient struct {
	cc grpc.ClientConnInterface
}

func NewG2DiagnosticClient(cc grpc.ClientConnInterface) G2DiagnosticClient {
	return &g2DiagnosticClient{cc}
}

func (c *g2DiagnosticClient) CheckDBPerf(ctx context.Context, in *CheckDBPerfRequest, opts ...grpc.CallOption) (*CheckDBPerfResponse, error) {
	out := new(CheckDBPerfResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/CheckDBPerf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) ClearLastException(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/ClearLastException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// G2DiagnosticServer is the server API for G2Diagnostic service.
// All implementations must embed UnimplementedG2DiagnosticServer
// for forward compatibility
type G2DiagnosticServer interface {
	CheckDBPerf(context.Context, *CheckDBPerfRequest) (*CheckDBPerfResponse, error)
	ClearLastException(context.Context, *Empty) (*Empty, error)
	Init(context.Context, *InitRequest) (*Empty, error)
	mustEmbedUnimplementedG2DiagnosticServer()
}

// UnimplementedG2DiagnosticServer must be embedded to have forward compatible implementations.
type UnimplementedG2DiagnosticServer struct {
}

func (UnimplementedG2DiagnosticServer) CheckDBPerf(context.Context, *CheckDBPerfRequest) (*CheckDBPerfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDBPerf not implemented")
}
func (UnimplementedG2DiagnosticServer) ClearLastException(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLastException not implemented")
}
func (UnimplementedG2DiagnosticServer) Init(context.Context, *InitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedG2DiagnosticServer) mustEmbedUnimplementedG2DiagnosticServer() {}

// UnsafeG2DiagnosticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to G2DiagnosticServer will
// result in compilation errors.
type UnsafeG2DiagnosticServer interface {
	mustEmbedUnimplementedG2DiagnosticServer()
}

func RegisterG2DiagnosticServer(s grpc.ServiceRegistrar, srv G2DiagnosticServer) {
	s.RegisterService(&G2Diagnostic_ServiceDesc, srv)
}

func _G2Diagnostic_CheckDBPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDBPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).CheckDBPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/CheckDBPerf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).CheckDBPerf(ctx, req.(*CheckDBPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_ClearLastException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).ClearLastException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/ClearLastException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).ClearLastException(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// G2Diagnostic_ServiceDesc is the grpc.ServiceDesc for G2Diagnostic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var G2Diagnostic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g2diagnostic.G2Diagnostic",
	HandlerType: (*G2DiagnosticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDBPerf",
			Handler:    _G2Diagnostic_CheckDBPerf_Handler,
		},
		{
			MethodName: "ClearLastException",
			Handler:    _G2Diagnostic_ClearLastException_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _G2Diagnostic_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "g2diagnostic.proto",
}
